{"ast":null,"code":"import { useMemo, useReducer, useEffect, useRef } from 'react';\n\nvar snapshotToData = function snapshotToData(snapshot, snapshotOptions, idField, refField, transform) {\n  if (!snapshot.exists) {\n    return undefined;\n  }\n\n  var data = snapshot.data(snapshotOptions);\n\n  if (transform) {\n    data = transform(data);\n  }\n\n  if (idField) {\n    data[idField] = snapshot.id;\n  }\n\n  if (refField) {\n    data[refField] = snapshot.ref;\n  }\n\n  return data;\n};\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nvar defaultState = function defaultState(defaultValue) {\n  return {\n    loading: defaultValue === undefined || defaultValue === null,\n    value: defaultValue\n  };\n};\n\nvar reducer = function reducer() {\n  return function (state, action) {\n    switch (action.type) {\n      case 'error':\n        return _assign({}, state, {\n          error: action.error,\n          loading: false,\n          value: undefined\n        });\n\n      case 'reset':\n        return defaultState(action.defaultValue);\n\n      case 'value':\n        return _assign({}, state, {\n          error: undefined,\n          loading: false,\n          value: action.value\n        });\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar useLoadingValue = function useLoadingValue(getDefaultValue) {\n  var defaultValue = getDefaultValue ? getDefaultValue() : undefined;\n\n  var _a = useReducer(reducer(), defaultState(defaultValue)),\n      state = _a[0],\n      dispatch = _a[1];\n\n  var reset = function reset() {\n    var defaultValue = getDefaultValue ? getDefaultValue() : undefined;\n    dispatch({\n      type: 'reset',\n      defaultValue: defaultValue\n    });\n  };\n\n  var setError = function setError(error) {\n    dispatch({\n      type: 'error',\n      error: error\n    });\n  };\n\n  var setValue = function setValue(value) {\n    dispatch({\n      type: 'value',\n      value: value\n    });\n  };\n\n  return useMemo(function () {\n    return {\n      error: state.error,\n      loading: state.loading,\n      reset: reset,\n      setError: setError,\n      setValue: setValue,\n      value: state.value\n    };\n  }, [state.error, state.loading, reset, setError, setValue, state.value]);\n};\n\nvar useComparatorRef = function useComparatorRef(value, isEqual, onChange) {\n  var ref = useRef(value);\n  useEffect(function () {\n    if (!isEqual(value, ref.current)) {\n      ref.current = value;\n\n      if (onChange) {\n        onChange();\n      }\n    }\n  });\n  return ref;\n};\n\nvar isEqual = function isEqual(v1, v2) {\n  var bothNull = !v1 && !v2;\n  var equal = !!v1 && !!v2 && v1.isEqual(v2);\n  return bothNull || equal;\n};\n\nvar useIsEqualRef = function useIsEqualRef(value, onChange) {\n  return useComparatorRef(value, isEqual, onChange);\n};\n\nvar useCollection = function useCollection(query, options) {\n  return useCollectionInternal(true, query, options);\n};\n\nvar useCollectionOnce = function useCollectionOnce(query, options) {\n  return useCollectionInternal(false, query, options);\n};\n\nvar useCollectionData = function useCollectionData(query, options) {\n  return useCollectionDataInternal(true, query, options);\n};\n\nvar useCollectionDataOnce = function useCollectionDataOnce(query, options) {\n  return useCollectionDataInternal(false, query, options);\n};\n\nvar useCollectionInternal = function useCollectionInternal(listen, query, options) {\n  var _a = useLoadingValue(),\n      error = _a.error,\n      loading = _a.loading,\n      reset = _a.reset,\n      setError = _a.setError,\n      setValue = _a.setValue,\n      value = _a.value;\n\n  var ref = useIsEqualRef(query, reset);\n  useEffect(function () {\n    if (!ref.current) {\n      setValue(undefined);\n      return;\n    }\n\n    if (listen) {\n      var listener_1 = options && options.snapshotListenOptions ? ref.current.onSnapshot(options.snapshotListenOptions, setValue, setError) : ref.current.onSnapshot(setValue, setError);\n      return function () {\n        listener_1();\n      };\n    } else {\n      ref.current.get(options ? options.getOptions : undefined).then(setValue).catch(setError);\n    }\n  }, [ref.current]);\n  var resArray = [value, loading, error];\n  return useMemo(function () {\n    return resArray;\n  }, resArray);\n};\n\nvar useCollectionDataInternal = function useCollectionDataInternal(listen, query, options) {\n  var idField = options ? options.idField : undefined;\n  var refField = options ? options.refField : undefined;\n  var snapshotOptions = options ? options.snapshotOptions : undefined;\n  var transform = options ? options.transform : undefined;\n\n  var _a = useCollectionInternal(listen, query, options),\n      snapshots = _a[0],\n      loading = _a[1],\n      error = _a[2];\n\n  var values = useMemo(function () {\n    return snapshots ? snapshots.docs.map(function (doc) {\n      return snapshotToData(doc, snapshotOptions, idField, refField, transform);\n    }) : undefined;\n  }, [snapshots, snapshotOptions, idField, refField, transform]);\n  var resArray = [values, loading, error];\n  return useMemo(function () {\n    return resArray;\n  }, resArray);\n};\n\nvar useDocument = function useDocument(docRef, options) {\n  return useDocumentInternal(true, docRef, options);\n};\n\nvar useDocumentOnce = function useDocumentOnce(docRef, options) {\n  return useDocumentInternal(false, docRef, options);\n};\n\nvar useDocumentData = function useDocumentData(docRef, options) {\n  return useDocumentDataInternal(true, docRef, options);\n};\n\nvar useDocumentDataOnce = function useDocumentDataOnce(docRef, options) {\n  return useDocumentDataInternal(false, docRef, options);\n};\n\nvar useDocumentInternal = function useDocumentInternal(listen, docRef, options) {\n  var _a = useLoadingValue(),\n      error = _a.error,\n      loading = _a.loading,\n      reset = _a.reset,\n      setError = _a.setError,\n      setValue = _a.setValue,\n      value = _a.value;\n\n  var ref = useIsEqualRef(docRef, reset);\n  useEffect(function () {\n    if (!ref.current) {\n      setValue(undefined);\n      return;\n    }\n\n    if (listen) {\n      var listener_1 = options && options.snapshotListenOptions ? ref.current.onSnapshot(options.snapshotListenOptions, setValue, setError) : ref.current.onSnapshot(setValue, setError);\n      return function () {\n        listener_1();\n      };\n    } else {\n      ref.current.get(options ? options.getOptions : undefined).then(setValue).catch(setError);\n    }\n  }, [ref.current]);\n  var resArray = [value, loading, error];\n  return useMemo(function () {\n    return resArray;\n  }, resArray);\n};\n\nvar useDocumentDataInternal = function useDocumentDataInternal(listen, docRef, options) {\n  var idField = options ? options.idField : undefined;\n  var refField = options ? options.refField : undefined;\n  var snapshotOptions = options ? options.snapshotOptions : undefined;\n  var transform = options ? options.transform : undefined;\n\n  var _a = useDocumentInternal(listen, docRef, options),\n      snapshot = _a[0],\n      loading = _a[1],\n      error = _a[2];\n\n  var value = useMemo(function () {\n    return snapshot ? snapshotToData(snapshot, snapshotOptions, idField, refField, transform) : undefined;\n  }, [snapshot, snapshotOptions, idField, refField, transform]);\n  var resArray = [value, loading, error];\n  return useMemo(function () {\n    return resArray;\n  }, resArray);\n};\n\nexport { useCollection, useCollectionOnce, useCollectionData, useCollectionDataOnce, useDocument, useDocumentData, useDocumentOnce, useDocumentDataOnce };","map":null,"metadata":{},"sourceType":"module"}